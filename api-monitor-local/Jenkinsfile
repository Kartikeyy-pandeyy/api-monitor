pipeline {
  agent any

  parameters {
    text(name: 'APIS_JSON_OVERRIDE', defaultValue: '', description: 'Optional: replace checker/apis.json contents for this run')
  }

  environment {
    CHECKER_IMAGE   = "api-checker:local"
    FRONTEND_IMAGE  = "api-frontend:local"
    VOLUME_NAME     = "apidata"
    FRONTEND_NAME   = "api-frontend"
    FRONTEND_PORT   = "8088"
    NETWORK_NAME    = "apimon"
    SUBDIR          = "api-monitor-local"
  }

  options { timestamps() }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Prep (apis.json)') {
      steps {
        dir("${SUBDIR}") {
          sh 'mkdir -p checker frontend'
          script {
            if (params.APIS_JSON_OVERRIDE?.trim()) {
              writeFile file: 'checker/apis.json', text: params.APIS_JSON_OVERRIDE
            }
          }
          sh 'test -s checker/apis.json || { echo "checker/apis.json missing or empty"; exit 1; }'
        }
      }
    }

    stage('Docker setup') {
      steps {
        sh '''
          set -eux
          docker volume create ${VOLUME_NAME} >/dev/null
          docker network create ${NETWORK_NAME} >/dev/null 2>&1 || true
        '''
      }
    }

    stage('Build checker image') {
      steps {
        dir("${SUBDIR}") {
          sh '''
            set -eux
            docker build -t ${CHECKER_IMAGE} -f checker/checker.Dockerfile .
          '''
        }
      }
    }

    stage('Run checker (generate status.json)') {
      steps {
        dir("${SUBDIR}") {
          sh '''
            set -eux
            cat checker/apis.json | docker run --rm -i \
              -v ${VOLUME_NAME}:/data \
              alpine sh -c "cat > /data/apis.json"

            docker run --rm \
              --network ${NETWORK_NAME} \
              -v ${VOLUME_NAME}:/data \
              -e ENDPOINTS_FILE=/data/apis.json \
              -e OUTPUT_FILE=/data/status.json \
              ${CHECKER_IMAGE}
          '''
        }
      }
    }

    stage('Build frontend image') {
      steps {
        dir("${SUBDIR}") {
          sh '''
            set -eux
            docker build -t ${FRONTEND_IMAGE} -f frontend/frontend.Dockerfile .
          '''
        }
      }
    }

    stage('Refresh frontend container') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'jenkins-api', usernameVariable: 'JUSER', passwordVariable: 'JTOKEN')]) {
          sh '''
            set -eux
            docker rm -f ${FRONTEND_NAME} >/dev/null 2>&1 || true
            docker run -d --name ${FRONTEND_NAME} \
              --network ${NETWORK_NAME} \
              -p ${FRONTEND_PORT}:80 \
              -v ${VOLUME_NAME}:/app/public/data:ro \
              -e JENKINS_URL=http://host.docker.internal:8080 \
              -e JENKINS_USER=${JUSER} \
              -e JENKINS_TOKEN=${JTOKEN} \
              -e JENKINS_JOB=api-monitor-local \
              ${FRONTEND_IMAGE}
          '''
        }
      }
    }
  }

  post {
    success {
      echo "✅ Frontend available at: http://localhost:${FRONTEND_PORT}"
      echo "ℹ️ status.json stored in Docker volume: ${VOLUME_NAME}"
    }
    failure {
      echo "❌ Build failed. Check logs above."
    }
  }
}
